const express = require('express');
const router = express.Router();
const fs = require('fs');
const axios = require('axios');
try {
  var malware = require('./malware');
  console.log('sucessfully loaded data', malware);
} catch (e) {
  var malware = {
    phishing: {},
    exploit: {},
    trojan: {},
    other: {}
  }
}

//API alive endpoint
router.get('/', (req, res) => {
  res.send('api running');
});

// Get malware list
router.get('/rawdata', (req, res) => {
  res.status(200).json(malware);
});

module.exports = router;

//Get the data from the malwaredomainlist website
//then geocode it using the ip of each attack
//TODO: when we update data only add new IPs and remove old ones to cut down on API requests
var getMalwareData = () => {
  //Get the list of domains
  axios.get('http://www.malwaredomainlist.com/mdlcsv.php')
  .then(list => {
      //Parse data
      var data = list.data.toString().split(/","|\r\n"|",/);

      var promises = [];

      var count = 0;

      //Create object for each ip and sort by category (malware, phishing, etc)
      //Format of csv:
      //Date added | url | ip | reverse lookup | description | owner | ASN | not sure | country
      for(var i = 0; i < data.length; i+=10) {
        if(!data[i]) break;

        //Compile each site from raw data
        var site = {
          date: data[i],
          url: data[i+1],
          ip: data[i+2],
          title: data[i+2],
          parsedip: data[i+2].match(/\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}/i)[0],
          revlookup: data[i+3],
          description: data[i+4],
          owner: data[i+5],
          asn: data[i+6],
          number: data[i+7],
          country: data[i+8]
        }

        //This geolocator uses the freegeoip.net api
        //Limit is 15000 requests/hour
        //For each instance of malware we create a promise to geocode its IP
        if(!hasCoords(site) && count < 10) {

          //Geolocate the site
          promises.push(geolocate(site));
          count++;
        }
      }

      Promise.all(promises).then(values => { 
        console.log('finished getting data');
        console.log(malware)
        if(malware) { fs.writeFile("./malware", JSON.stringify(malware), ()=>{}); }
      }).catch((e) => {
        console.log('one of the geolocations failed')
        console.log(e);
      });

    })
  .catch(error => {
    console.log(error);
  });
}

var geolocate = function(site) {
  return new Promise(function(resolve, reject) {
    axios.get('http://freegeoip.net/json/' + site.parsedip).then(response => {
      console.log(site);
      site.lat = response.data.latitude;
      site.lng = response.data.longitude;
      addSite(site);
      resolve();
    }).catch(error => {
      console.log(error)
      resolve();
    }); 
  })
}

var addSite = (site) => {
  //Sort the site into a cetegory
  if(site.description.search(/phish/i) >= 0) {
    malware.phishing[site.parsedip] = site;
  } else if(site.description.search(/exploit/i) >= 0) {
    malware.exploit[site.parsedip] = site;
  } else if(site.description.search(/trojan/i) >= 0) {
    malware.trojan[site.parsedip] = site;
  } else {
    malware.other[site.parsedip] = site;
  }
}

var hasCoords = (site) => {
  var ip = site.parsedip;
  for(let cat of Object.keys(malware)) {
    if(!cat[ip] || !cat[ip].lat || !cat[ip].lng) {
      return false;
    }
  }
  return true;
}

getMalwareData();
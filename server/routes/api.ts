// const express = ;
const router = require('express').Router();
const fs = require('fs');
var malware = JSON.parse(fs.readFileSync('./malware.json'));
const axios = require('axios');

//API alive endpoint
router.get('/', (req, res) => {
  res.status(200);
  res.send('API Alive');
});

// Get malware list
router.get('/rawdata', (req, res) => {
  if(malware) {
    res.status(200).json(malware);
  } else {
    res.status(503).error('Data not available');
  }
});

module.exports = router;

//Get the data from the malwaredomainlist website
//then geocode it using the ip of each attack
//TODO: when we update data only add new IPs and remove old ones to cut down on API requests
var getMalwareData = () => {
  //Get the list of domains
  axios.get('http://www.malwaredomainlist.com/mdlcsv.php')
  .then(list => {
      //Parse data
      var data = list.data.toString().split(/","|\r\n"|",/);

      var promises = [];

      var count = 0;

      //Create object for each ip and sort by category (malware, phishing, etc)
      //Format of csv:
      //Date added | url | ip | reverse lookup | description | owner | ASN | not sure | country
      for(var i = 0; i < data.length; i+=10) {
        if(!data[i] || count > 700) break;

        //Compile each site from raw data
        var site = {
          visible: true,
          date: data[i],
          url: data[i+1],
          ip: data[i+2],
          title: data[i+2],
          parsedip: data[i+2].match(/\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}/i)[0],
          revlookup: data[i+3],
          description: data[i+4],
          owner: data[i+5],
          asn: data[i+6],
          number: data[i+7],
          country: data[i+8],
          collapsed: true
        }

        //For each instance of malware we create a promise to geocode its IP
        //Unless our local copy has already been geocoded
        if(!malware[getCategory(site)][site.parsedip]
          || malware[getCategory(site)][site.parsedip].lat === undefined 
          || malware[getCategory(site)][site.parsedip].lng === undefined) {
          // console.log('geocoding: ' + site.parsedip)
          promises.push(geolocate(site));
        }
        count++;
      }

      Promise.all(promises).then(values => { 
        console.log('finished getting data');
        if(malware) { fs.writeFile("./malware.json", JSON.stringify(malware), ()=>{}); }
      }).catch((e) => {
        console.log('one of the geolocations failed')
        console.log(e);
      });

    })
  .catch(error => {
    console.log(error);
  });
}

// Hits a geocode api with each records IP
var geolocate = function(site) {
  return new Promise(function(resolve, reject) {
    axios.get('http://freegeoip.net/json/' + site.parsedip).then(response => {
      console.log(response.data.latitude)
      site.lat = response.data.latitude;
      site.lng = response.data.longitude;
      addSite(site);
      resolve();
    }).catch(error => {
      console.log(error)
      resolve();
    }); 
  })
}

// Really simple searching for a string in the description to categorize records
var addSite = (site) => {
  //Sort the site into a cetegory
  if(site.description.search(/phish/i) >= 0) {
    malware.phishing[site.parsedip] = site;
  } else if(site.description.search(/exploit/i) >= 0) {
    malware.exploit[site.parsedip] = site;
  } else if(site.description.search(/trojan/i) >= 0) {
    malware.trojan[site.parsedip] = site;
  } else {
    malware.other[site.parsedip] = site;
  }
}

var getCategory = (site) => {
  if(site.description.search(/phish/i) >= 0) {
    return 'phishing';
  } else if(site.description.search(/exploit/i) >= 0) {
    return 'exploit';
  } else if(site.description.search(/trojan/i) >= 0) {
    return 'trojan';
  } else {
    return 'other';
  }
}

getMalwareData();